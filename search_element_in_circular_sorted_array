# C++
int Solution::search(const vector<int> &A, int B) {
    int n = A.size();
    int low = 0, high = n-1;
    while(low<=high){
        int mid = low + (high-low)/2;
        if(A[mid] == B) return mid;
        else if(A[0]<=A[mid]){//i.e. left part is sorted
            if(A[0]<=B && B < A[mid]) high = mid-1;//B lies on left part
            else low = mid+1;
        }else{//right part is sorted
            if(A[mid] < B && B<=A[n-1]) low = mid+1;//B lies on right part
            else high = mid-1;
        }
    }
    return -1;
}

# Java
public class Solution {
	// DO NOT MODIFY THE LIST
	public int search(final List<Integer> a, int b) {
	    int i=0;
	    int j=a.size()-1;
	    
	    while(i<=j) {
	        int mid = (i +j)/2;
	        
	        if(a.get(mid)==b)
	            return mid;
	        if(a.get(mid)>=a.get(i)) {
	            if(b>=a.get(i)&&b<a.get(mid))
	                j=mid-1;
	            else
	                i=mid+1;
	        }
	        else {
	            if(b>a.get(mid)&&b<=a.get(j))
	                i=mid+1;
	            else
	                j=mid-1;
	        }
	    }
	    return -1;
	}
}

# Python 3
class Solution:
    # @param A : tuple of integers
    # @param B : integer
    # @return an integer
    def search(self, A, B):
        low = 0
        N = len(A)
        high = N-1
        
        while low <= high:
            mid = low + (high-low)//2
            if A[mid] == B:
                return mid
            nextR = (mid+1)%N
            prevR = (mid-1+N)%N
            
            if A[mid] <= A[high]:
                if B > A[mid] and B <= A[high]:
                    low = mid+1
                else:
                    high = mid-1
            else:
                if A[low] <= B and B < A[mid]:
                    high = mid-1
                else:
                    low = mid+1
        return -1
